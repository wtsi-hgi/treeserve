// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package treeserve

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	big "math/big"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson979bdb78DecodeGithubComWtsiHgiTreeserveGo(in *jlexer.Lexer, out *AggregateNums) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				if out.Size == nil {
					out.Size = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Size).UnmarshalJSON(data))
				}
			}
		case "Count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Count).UnmarshalJSON(data))
				}
			}
		case "CreateCost":
			if in.IsNull() {
				in.Skip()
				out.CreateCost = nil
			} else {
				if out.CreateCost == nil {
					out.CreateCost = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateCost).UnmarshalJSON(data))
				}
			}
		case "ModifyCost":
			if in.IsNull() {
				in.Skip()
				out.ModifyCost = nil
			} else {
				if out.ModifyCost == nil {
					out.ModifyCost = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifyCost).UnmarshalJSON(data))
				}
			}
		case "AccessCost":
			if in.IsNull() {
				in.Skip()
				out.AccessCost = nil
			} else {
				if out.AccessCost == nil {
					out.AccessCost = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AccessCost).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson979bdb78EncodeGithubComWtsiHgiTreeserveGo(out *jwriter.Writer, in AggregateNums) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Size\":")
	if in.Size == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Size).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Count\":")
	if in.Count == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Count).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CreateCost\":")
	if in.CreateCost == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.CreateCost).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ModifyCost\":")
	if in.ModifyCost == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.ModifyCost).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AccessCost\":")
	if in.AccessCost == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.AccessCost).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AggregateNums) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson979bdb78EncodeGithubComWtsiHgiTreeserveGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AggregateNums) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson979bdb78EncodeGithubComWtsiHgiTreeserveGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AggregateNums) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson979bdb78DecodeGithubComWtsiHgiTreeserveGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AggregateNums) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson979bdb78DecodeGithubComWtsiHgiTreeserveGo(l, v)
}
